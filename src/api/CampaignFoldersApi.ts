/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.80
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient';
import { campaignFolders } from '../types/mailchimp';

/**
 * CampaignFolders service.
 * @module api/CampaignFoldersApi
 */

/**
 * Constructs a new CampaignFoldersApi.
 * @alias module:api/CampaignFoldersApi
 * @class
 * @param {ApiClient} apiClient Optional API client implementation to use,
 * default to {@link ApiClient#instance} if unspecified.
 */
export default class CampaignFoldersApi {
  private apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Delete campaign folder
   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.
   * @param {string} folderId The unique id for the campaign folder.
   * @return {Promise<void>}
   */
  removeWithHttpInfo(folderId: string): Promise<void> {
    if (!folderId) {
      throw new Error("Missing the required parameter 'folderId' when calling removeWithHttpInfo");
    }

    const pathParams = {
      'folder_id': folderId
    };

    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = ['basicAuth'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json', 'application/problem+json'];
    const returnType = 'application/json';

    return this.apiClient.callApi(
      '/campaign-folders/{folder_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, null,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Delete campaign folder
   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.
   * @param {string} folderId The unique id for the campaign folder.
   * @return {Promise<void>}
   */
  remove(folderId: string): Promise<void> {
    return this.removeWithHttpInfo(folderId);
  }

  /**
   * List campaign folders
   * Get all folders used to organize campaigns.
   * @param {campaignFolders.CampaignFoldersOptions} opts Optional parameters
   * @return {Promise<campaignFolders.CampaignFoldersSuccessResponse>}
   */
  listWithHttpInfo(opts: campaignFolders.CampaignFoldersOptions = {}): Promise<campaignFolders.CampaignFoldersSuccessResponse> {
    const pathParams = {};
    const queryParams = {
      'fields': this.apiClient.buildCollectionParam(opts.fields, 'csv'),
      'exclude_fields': this.apiClient.buildCollectionParam(opts.exclude_fields, 'csv'),
      'count': opts.count,
      'offset': opts.offset
    };
    const headerParams = {};
    const formParams = {};

    const authNames = ['basicAuth'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json', 'application/problem+json'];
    const returnType = 'application/json';

    return this.apiClient.callApi(
      '/campaign-folders', 'GET',
      pathParams, queryParams, headerParams, formParams, null,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * List campaign folders
   * Get all folders used to organize campaigns.
   * @param {campaignFolders.CampaignFoldersOptions} opts Optional parameters
   * @return {Promise<campaignFolders.CampaignFoldersSuccessResponse>}
   */
  list(opts: campaignFolders.CampaignFoldersOptions = {}): Promise<campaignFolders.CampaignFoldersSuccessResponse> {
    return this.listWithHttpInfo(opts);
  }

  /**
   * Get campaign folder
   * Get information about a specific folder used to organize campaigns.
   * @param {string} folderId The unique id for the campaign folder.
   * @param {campaignFolders.CampaignFolderOptions} opts Optional parameters
   * @return {Promise<campaignFolders.CampaignFolder>}
   */
  getWithHttpInfo(folderId: string, opts: campaignFolders.CampaignFolderOptions = {}): Promise<campaignFolders.CampaignFolder> {
    if (!folderId) {
      throw new Error("Missing the required parameter 'folderId' when calling getWithHttpInfo");
    }

    const pathParams = {
      'folder_id': folderId
    };
    const queryParams = {
      'fields': this.apiClient.buildCollectionParam(opts.fields, 'csv'),
      'exclude_fields': this.apiClient.buildCollectionParam(opts.exclude_fields, 'csv')
    };
    const headerParams = {};
    const formParams = {};

    const authNames = ['basicAuth'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json', 'application/problem+json'];
    const returnType = 'application/json';

    return this.apiClient.callApi(
      '/campaign-folders/{folder_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, null,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Get campaign folder
   * Get information about a specific folder used to organize campaigns.
   * @param {string} folderId The unique id for the campaign folder.
   * @param {campaignFolders.CampaignFolderOptions} opts Optional parameters
   * @return {Promise<campaignFolders.CampaignFolder>}
   */
  get(folderId: string, opts: campaignFolders.CampaignFolderOptions = {}): Promise<campaignFolders.CampaignFolder> {
    return this.getWithHttpInfo(folderId, opts);
  }

  /**
   * Update campaign folder
   * Update a specific folder used to organize campaigns.
   * @param {string} folderId The unique id for the campaign folder.
   * @param {campaignFolders.CampaignFolder} body
   * @return {Promise<campaignFolders.CampaignFolder>}
   */
  updateWithHttpInfo(folderId: string, body: campaignFolders.CampaignFolder): Promise<campaignFolders.CampaignFolder> {
    if (!folderId) {
      throw new Error("Missing the required parameter 'folderId' when calling updateWithHttpInfo");
    }
    if (!body) {
      throw new Error("Missing the required parameter 'body' when calling updateWithHttpInfo");
    }

    const pathParams = {
      'folder_id': folderId
    };
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = ['basicAuth'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json', 'application/problem+json'];
    const returnType = 'application/json';

    return this.apiClient.callApi(
      '/campaign-folders/{folder_id}', 'PATCH',
      pathParams, queryParams, headerParams, formParams, body,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Update campaign folder
   * Update a specific folder used to organize campaigns.
   * @param {string} folderId The unique id for the campaign folder.
   * @param {campaignFolders.CampaignFolder} body
   * @return {Promise<campaignFolders.CampaignFolder>}
   */
  update(folderId: string, body: campaignFolders.CampaignFolder): Promise<campaignFolders.CampaignFolder> {
    return this.updateWithHttpInfo(folderId, body);
  }

  /**
   * Add campaign folder
   * Create a new campaign folder.
   * @param {campaignFolders.CampaignFolder} body
   * @return {Promise<campaignFolders.CampaignFolder>}
   */
  createWithHttpInfo(body: campaignFolders.CampaignFolder): Promise<campaignFolders.CampaignFolder> {
    if (!body) {
      throw new Error("Missing the required parameter 'body' when calling createWithHttpInfo");
    }

    const pathParams = {};
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = ['basicAuth'];
    const contentTypes = ['application/json'];
    const accepts = ['application/json', 'application/problem+json'];
    const returnType = 'application/json';

    return this.apiClient.callApi(
      '/campaign-folders', 'POST',
      pathParams, queryParams, headerParams, formParams, body,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Add campaign folder
   * Create a new campaign folder.
   * @param {campaignFolders.CampaignFolder} body
   * @return {Promise<campaignFolders.CampaignFolder>}
   */
  create(body: campaignFolders.CampaignFolder): Promise<campaignFolders.CampaignFolder> {
    return this.createWithHttpInfo(body);
  }
}
